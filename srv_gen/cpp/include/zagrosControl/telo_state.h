/* Auto-generated by genmsg_cpp for file /home/alaina/ros/zagrosControl/srv/telo_state.srv */
#ifndef ZAGROSCONTROL_SERVICE_TELO_STATE_H
#define ZAGROSCONTROL_SERVICE_TELO_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace zagrosControl
{
template <class ContainerAllocator>
struct telo_stateRequest_ {
  typedef telo_stateRequest_<ContainerAllocator> Type;

  telo_stateRequest_()
  : value()
  {
  }

  telo_stateRequest_(const ContainerAllocator& _alloc)
  : value(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  value;


private:
  static const char* __s_getDataType_() { return "zagrosControl/telo_stateRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "64e58419496c7248b4ef25731f88b8c3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8de8676759a8236f5fc5160d66f6ecf1"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string value\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(value);
    return size;
  }

  typedef boost::shared_ptr< ::zagrosControl::telo_stateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zagrosControl::telo_stateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct telo_stateRequest
typedef  ::zagrosControl::telo_stateRequest_<std::allocator<void> > telo_stateRequest;

typedef boost::shared_ptr< ::zagrosControl::telo_stateRequest> telo_stateRequestPtr;
typedef boost::shared_ptr< ::zagrosControl::telo_stateRequest const> telo_stateRequestConstPtr;


template <class ContainerAllocator>
struct telo_stateResponse_ {
  typedef telo_stateResponse_<ContainerAllocator> Type;

  telo_stateResponse_()
  : remote_username()
  , battery_capacity(0.0)
  , power_state()
  , battery_low(false)
  , tell_remote_user()
  , phone_home()
  {
  }

  telo_stateResponse_(const ContainerAllocator& _alloc)
  : remote_username(_alloc)
  , battery_capacity(0.0)
  , power_state(_alloc)
  , battery_low(false)
  , tell_remote_user(_alloc)
  , phone_home(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _remote_username_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  remote_username;

  typedef float _battery_capacity_type;
  float battery_capacity;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _power_state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  power_state;

  typedef uint8_t _battery_low_type;
  uint8_t battery_low;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tell_remote_user_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  tell_remote_user;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _phone_home_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  phone_home;


private:
  static const char* __s_getDataType_() { return "zagrosControl/telo_stateResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b19c6fe489b2b2906e73c9577a122021"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8de8676759a8236f5fc5160d66f6ecf1"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string remote_username\n\
float32 battery_capacity\n\
string power_state\n\
bool battery_low\n\
string tell_remote_user\n\
string phone_home\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, remote_username);
    ros::serialization::serialize(stream, battery_capacity);
    ros::serialization::serialize(stream, power_state);
    ros::serialization::serialize(stream, battery_low);
    ros::serialization::serialize(stream, tell_remote_user);
    ros::serialization::serialize(stream, phone_home);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, remote_username);
    ros::serialization::deserialize(stream, battery_capacity);
    ros::serialization::deserialize(stream, power_state);
    ros::serialization::deserialize(stream, battery_low);
    ros::serialization::deserialize(stream, tell_remote_user);
    ros::serialization::deserialize(stream, phone_home);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(remote_username);
    size += ros::serialization::serializationLength(battery_capacity);
    size += ros::serialization::serializationLength(power_state);
    size += ros::serialization::serializationLength(battery_low);
    size += ros::serialization::serializationLength(tell_remote_user);
    size += ros::serialization::serializationLength(phone_home);
    return size;
  }

  typedef boost::shared_ptr< ::zagrosControl::telo_stateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zagrosControl::telo_stateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct telo_stateResponse
typedef  ::zagrosControl::telo_stateResponse_<std::allocator<void> > telo_stateResponse;

typedef boost::shared_ptr< ::zagrosControl::telo_stateResponse> telo_stateResponsePtr;
typedef boost::shared_ptr< ::zagrosControl::telo_stateResponse const> telo_stateResponseConstPtr;

struct telo_state
{

typedef telo_stateRequest Request;
typedef telo_stateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct telo_state
} // namespace zagrosControl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::zagrosControl::telo_stateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::zagrosControl::telo_stateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::zagrosControl::telo_stateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64e58419496c7248b4ef25731f88b8c3";
  }

  static const char* value(const  ::zagrosControl::telo_stateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x64e58419496c7248ULL;
  static const uint64_t static_value2 = 0xb4ef25731f88b8c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::zagrosControl::telo_stateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zagrosControl/telo_stateRequest";
  }

  static const char* value(const  ::zagrosControl::telo_stateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::zagrosControl::telo_stateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string value\n\
\n\
";
  }

  static const char* value(const  ::zagrosControl::telo_stateRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::zagrosControl::telo_stateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::zagrosControl::telo_stateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::zagrosControl::telo_stateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b19c6fe489b2b2906e73c9577a122021";
  }

  static const char* value(const  ::zagrosControl::telo_stateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb19c6fe489b2b290ULL;
  static const uint64_t static_value2 = 0x6e73c9577a122021ULL;
};

template<class ContainerAllocator>
struct DataType< ::zagrosControl::telo_stateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zagrosControl/telo_stateResponse";
  }

  static const char* value(const  ::zagrosControl::telo_stateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::zagrosControl::telo_stateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string remote_username\n\
float32 battery_capacity\n\
string power_state\n\
bool battery_low\n\
string tell_remote_user\n\
string phone_home\n\
\n\
\n\
";
  }

  static const char* value(const  ::zagrosControl::telo_stateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::zagrosControl::telo_stateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct telo_stateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::zagrosControl::telo_stateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.remote_username);
    stream.next(m.battery_capacity);
    stream.next(m.power_state);
    stream.next(m.battery_low);
    stream.next(m.tell_remote_user);
    stream.next(m.phone_home);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct telo_stateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<zagrosControl::telo_state> {
  static const char* value() 
  {
    return "8de8676759a8236f5fc5160d66f6ecf1";
  }

  static const char* value(const zagrosControl::telo_state&) { return value(); } 
};

template<>
struct DataType<zagrosControl::telo_state> {
  static const char* value() 
  {
    return "zagrosControl/telo_state";
  }

  static const char* value(const zagrosControl::telo_state&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<zagrosControl::telo_stateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8de8676759a8236f5fc5160d66f6ecf1";
  }

  static const char* value(const zagrosControl::telo_stateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<zagrosControl::telo_stateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zagrosControl/telo_state";
  }

  static const char* value(const zagrosControl::telo_stateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<zagrosControl::telo_stateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8de8676759a8236f5fc5160d66f6ecf1";
  }

  static const char* value(const zagrosControl::telo_stateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<zagrosControl::telo_stateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zagrosControl/telo_state";
  }

  static const char* value(const zagrosControl::telo_stateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ZAGROSCONTROL_SERVICE_TELO_STATE_H

